/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  ListRecurringPaymentsParams,
  RecurringPaymentCreate,
  RecurringPaymentRead,
  RecurringPaymentUpdate
} from './schemas';

import { customInstance } from './custom-instance';



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create Recurring Payment
 */
export const createRecurringPayment = (
    recurringPaymentCreate: RecurringPaymentCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RecurringPaymentRead>(
      {url: `/recurring-payments/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: recurringPaymentCreate, signal
    },
      options);
    }
  


export const getCreateRecurringPaymentMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRecurringPayment>>, TError,{data: RecurringPaymentCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createRecurringPayment>>, TError,{data: RecurringPaymentCreate}, TContext> => {

const mutationKey = ['createRecurringPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRecurringPayment>>, {data: RecurringPaymentCreate}> = (props) => {
          const {data} = props ?? {};

          return  createRecurringPayment(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRecurringPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof createRecurringPayment>>>
    export type CreateRecurringPaymentMutationBody = RecurringPaymentCreate
    export type CreateRecurringPaymentMutationError = HTTPValidationError

    /**
 * @summary Create Recurring Payment
 */
export const useCreateRecurringPayment = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRecurringPayment>>, TError,{data: RecurringPaymentCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRecurringPayment>>,
        TError,
        {data: RecurringPaymentCreate},
        TContext
      > => {

      const mutationOptions = getCreateRecurringPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Recurring Payments
 */
export const listRecurringPayments = (
    params?: ListRecurringPaymentsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RecurringPaymentRead[]>(
      {url: `/recurring-payments/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListRecurringPaymentsQueryKey = (params?: ListRecurringPaymentsParams,) => {
    return [`/recurring-payments/`, ...(params ? [params]: [])] as const;
    }

    
export const getListRecurringPaymentsQueryOptions = <TData = Awaited<ReturnType<typeof listRecurringPayments>>, TError = HTTPValidationError>(params?: ListRecurringPaymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListRecurringPaymentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listRecurringPayments>>> = ({ signal }) => listRecurringPayments(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListRecurringPaymentsQueryResult = NonNullable<Awaited<ReturnType<typeof listRecurringPayments>>>
export type ListRecurringPaymentsQueryError = HTTPValidationError


export function useListRecurringPayments<TData = Awaited<ReturnType<typeof listRecurringPayments>>, TError = HTTPValidationError>(
 params: undefined |  ListRecurringPaymentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRecurringPayments>>,
          TError,
          Awaited<ReturnType<typeof listRecurringPayments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRecurringPayments<TData = Awaited<ReturnType<typeof listRecurringPayments>>, TError = HTTPValidationError>(
 params?: ListRecurringPaymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRecurringPayments>>,
          TError,
          Awaited<ReturnType<typeof listRecurringPayments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRecurringPayments<TData = Awaited<ReturnType<typeof listRecurringPayments>>, TError = HTTPValidationError>(
 params?: ListRecurringPaymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Recurring Payments
 */

export function useListRecurringPayments<TData = Awaited<ReturnType<typeof listRecurringPayments>>, TError = HTTPValidationError>(
 params?: ListRecurringPaymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRecurringPayments>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListRecurringPaymentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Recurring Payment
 */
export const getRecurringPayment = (
    recurringPaymentId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RecurringPaymentRead>(
      {url: `/recurring-payments/${recurringPaymentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetRecurringPaymentQueryKey = (recurringPaymentId: number,) => {
    return [`/recurring-payments/${recurringPaymentId}`] as const;
    }

    
export const getGetRecurringPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getRecurringPayment>>, TError = HTTPValidationError>(recurringPaymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecurringPaymentQueryKey(recurringPaymentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecurringPayment>>> = ({ signal }) => getRecurringPayment(recurringPaymentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(recurringPaymentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecurringPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getRecurringPayment>>>
export type GetRecurringPaymentQueryError = HTTPValidationError


export function useGetRecurringPayment<TData = Awaited<ReturnType<typeof getRecurringPayment>>, TError = HTTPValidationError>(
 recurringPaymentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecurringPayment>>,
          TError,
          Awaited<ReturnType<typeof getRecurringPayment>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecurringPayment<TData = Awaited<ReturnType<typeof getRecurringPayment>>, TError = HTTPValidationError>(
 recurringPaymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecurringPayment>>,
          TError,
          Awaited<ReturnType<typeof getRecurringPayment>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecurringPayment<TData = Awaited<ReturnType<typeof getRecurringPayment>>, TError = HTTPValidationError>(
 recurringPaymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Recurring Payment
 */

export function useGetRecurringPayment<TData = Awaited<ReturnType<typeof getRecurringPayment>>, TError = HTTPValidationError>(
 recurringPaymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecurringPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRecurringPaymentQueryOptions(recurringPaymentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Recurring Payment
 */
export const updateRecurringPayment = (
    recurringPaymentId: number,
    recurringPaymentUpdate: RecurringPaymentUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<RecurringPaymentRead>(
      {url: `/recurring-payments/${recurringPaymentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: recurringPaymentUpdate
    },
      options);
    }
  


export const getUpdateRecurringPaymentMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRecurringPayment>>, TError,{recurringPaymentId: number;data: RecurringPaymentUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRecurringPayment>>, TError,{recurringPaymentId: number;data: RecurringPaymentUpdate}, TContext> => {

const mutationKey = ['updateRecurringPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRecurringPayment>>, {recurringPaymentId: number;data: RecurringPaymentUpdate}> = (props) => {
          const {recurringPaymentId,data} = props ?? {};

          return  updateRecurringPayment(recurringPaymentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRecurringPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof updateRecurringPayment>>>
    export type UpdateRecurringPaymentMutationBody = RecurringPaymentUpdate
    export type UpdateRecurringPaymentMutationError = HTTPValidationError

    /**
 * @summary Update Recurring Payment
 */
export const useUpdateRecurringPayment = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRecurringPayment>>, TError,{recurringPaymentId: number;data: RecurringPaymentUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateRecurringPayment>>,
        TError,
        {recurringPaymentId: number;data: RecurringPaymentUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateRecurringPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Recurring Payment
 */
export const deleteRecurringPayment = (
    recurringPaymentId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/recurring-payments/${recurringPaymentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteRecurringPaymentMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRecurringPayment>>, TError,{recurringPaymentId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRecurringPayment>>, TError,{recurringPaymentId: number}, TContext> => {

const mutationKey = ['deleteRecurringPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRecurringPayment>>, {recurringPaymentId: number}> = (props) => {
          const {recurringPaymentId} = props ?? {};

          return  deleteRecurringPayment(recurringPaymentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRecurringPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRecurringPayment>>>
    
    export type DeleteRecurringPaymentMutationError = HTTPValidationError

    /**
 * @summary Delete Recurring Payment
 */
export const useDeleteRecurringPayment = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRecurringPayment>>, TError,{recurringPaymentId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteRecurringPayment>>,
        TError,
        {recurringPaymentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteRecurringPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    