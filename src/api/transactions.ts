/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  ListTransactionsParams,
  TransactionCreate,
  TransactionRead,
  TransactionUpdate
} from './schemas';

import { customInstance } from './custom-instance';



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create Transaction
 */
export const createTransaction = (
    transactionCreate: TransactionCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TransactionRead>(
      {url: `/transactions/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transactionCreate, signal
    },
      options);
    }
  


export const getCreateTransactionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTransaction>>, TError,{data: TransactionCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createTransaction>>, TError,{data: TransactionCreate}, TContext> => {

const mutationKey = ['createTransaction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTransaction>>, {data: TransactionCreate}> = (props) => {
          const {data} = props ?? {};

          return  createTransaction(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTransactionMutationResult = NonNullable<Awaited<ReturnType<typeof createTransaction>>>
    export type CreateTransactionMutationBody = TransactionCreate
    export type CreateTransactionMutationError = HTTPValidationError

    /**
 * @summary Create Transaction
 */
export const useCreateTransaction = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTransaction>>, TError,{data: TransactionCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTransaction>>,
        TError,
        {data: TransactionCreate},
        TContext
      > => {

      const mutationOptions = getCreateTransactionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Transactions
 */
export const listTransactions = (
    params?: ListTransactionsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TransactionRead[]>(
      {url: `/transactions/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListTransactionsQueryKey = (params?: ListTransactionsParams,) => {
    return [`/transactions/`, ...(params ? [params]: [])] as const;
    }

    
export const getListTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof listTransactions>>, TError = HTTPValidationError>(params?: ListTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListTransactionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listTransactions>>> = ({ signal }) => listTransactions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof listTransactions>>>
export type ListTransactionsQueryError = HTTPValidationError


export function useListTransactions<TData = Awaited<ReturnType<typeof listTransactions>>, TError = HTTPValidationError>(
 params: undefined |  ListTransactionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactions>>,
          TError,
          Awaited<ReturnType<typeof listTransactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListTransactions<TData = Awaited<ReturnType<typeof listTransactions>>, TError = HTTPValidationError>(
 params?: ListTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactions>>,
          TError,
          Awaited<ReturnType<typeof listTransactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListTransactions<TData = Awaited<ReturnType<typeof listTransactions>>, TError = HTTPValidationError>(
 params?: ListTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Transactions
 */

export function useListTransactions<TData = Awaited<ReturnType<typeof listTransactions>>, TError = HTTPValidationError>(
 params?: ListTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListTransactionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Transaction
 */
export const getTransaction = (
    transactionId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TransactionRead>(
      {url: `/transactions/${transactionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTransactionQueryKey = (transactionId: number,) => {
    return [`/transactions/${transactionId}`] as const;
    }

    
export const getGetTransactionQueryOptions = <TData = Awaited<ReturnType<typeof getTransaction>>, TError = HTTPValidationError>(transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionQueryKey(transactionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransaction>>> = ({ signal }) => getTransaction(transactionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(transactionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionQueryResult = NonNullable<Awaited<ReturnType<typeof getTransaction>>>
export type GetTransactionQueryError = HTTPValidationError


export function useGetTransaction<TData = Awaited<ReturnType<typeof getTransaction>>, TError = HTTPValidationError>(
 transactionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransaction>>,
          TError,
          Awaited<ReturnType<typeof getTransaction>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransaction<TData = Awaited<ReturnType<typeof getTransaction>>, TError = HTTPValidationError>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransaction>>,
          TError,
          Awaited<ReturnType<typeof getTransaction>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransaction<TData = Awaited<ReturnType<typeof getTransaction>>, TError = HTTPValidationError>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Transaction
 */

export function useGetTransaction<TData = Awaited<ReturnType<typeof getTransaction>>, TError = HTTPValidationError>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionQueryOptions(transactionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Transaction
 */
export const updateTransaction = (
    transactionId: number,
    transactionUpdate: TransactionUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TransactionRead>(
      {url: `/transactions/${transactionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: transactionUpdate
    },
      options);
    }
  


export const getUpdateTransactionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTransaction>>, TError,{transactionId: number;data: TransactionUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateTransaction>>, TError,{transactionId: number;data: TransactionUpdate}, TContext> => {

const mutationKey = ['updateTransaction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTransaction>>, {transactionId: number;data: TransactionUpdate}> = (props) => {
          const {transactionId,data} = props ?? {};

          return  updateTransaction(transactionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTransactionMutationResult = NonNullable<Awaited<ReturnType<typeof updateTransaction>>>
    export type UpdateTransactionMutationBody = TransactionUpdate
    export type UpdateTransactionMutationError = HTTPValidationError

    /**
 * @summary Update Transaction
 */
export const useUpdateTransaction = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTransaction>>, TError,{transactionId: number;data: TransactionUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTransaction>>,
        TError,
        {transactionId: number;data: TransactionUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateTransactionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Transaction
 */
export const deleteTransaction = (
    transactionId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/transactions/${transactionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTransactionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransaction>>, TError,{transactionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTransaction>>, TError,{transactionId: number}, TContext> => {

const mutationKey = ['deleteTransaction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTransaction>>, {transactionId: number}> = (props) => {
          const {transactionId} = props ?? {};

          return  deleteTransaction(transactionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTransactionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransaction>>>
    
    export type DeleteTransactionMutationError = HTTPValidationError

    /**
 * @summary Delete Transaction
 */
export const useDeleteTransaction = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransaction>>, TError,{transactionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTransaction>>,
        TError,
        {transactionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteTransactionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Generate Recurring Transactions
 */
export const generateRecurringTransactions = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TransactionRead[]>(
      {url: `/transactions/generate-recurring`, method: 'POST', signal
    },
      options);
    }
  


export const getGenerateRecurringTransactionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateRecurringTransactions>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof generateRecurringTransactions>>, TError,void, TContext> => {

const mutationKey = ['generateRecurringTransactions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateRecurringTransactions>>, void> = () => {
          

          return  generateRecurringTransactions(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateRecurringTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof generateRecurringTransactions>>>
    
    export type GenerateRecurringTransactionsMutationError = unknown

    /**
 * @summary Generate Recurring Transactions
 */
export const useGenerateRecurringTransactions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateRecurringTransactions>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateRecurringTransactions>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getGenerateRecurringTransactionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    