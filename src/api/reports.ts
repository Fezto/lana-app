/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CategoryReportResponse,
  GetByCategoryReportParams,
  GetIncomeExpenseReportParams,
  GetTrendReportParams,
  HTTPValidationError,
  IncomeExpenseResponse,
  TrendReportResponse
} from './schemas';

import { customInstance } from './custom-instance';



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Totales de ingresos vs gastos por mes dentro de un rango de fechas.
 * @summary Get Income Expense
 */
export const getIncomeExpenseReport = (
    params: GetIncomeExpenseReportParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IncomeExpenseResponse>(
      {url: `/reports/income-expense`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIncomeExpenseReportQueryKey = (params: GetIncomeExpenseReportParams,) => {
    return [`/reports/income-expense`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIncomeExpenseReportQueryOptions = <TData = Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError = HTTPValidationError>(params: GetIncomeExpenseReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIncomeExpenseReportQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIncomeExpenseReport>>> = ({ signal }) => getIncomeExpenseReport(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIncomeExpenseReportQueryResult = NonNullable<Awaited<ReturnType<typeof getIncomeExpenseReport>>>
export type GetIncomeExpenseReportQueryError = HTTPValidationError


export function useGetIncomeExpenseReport<TData = Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError = HTTPValidationError>(
 params: GetIncomeExpenseReportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIncomeExpenseReport>>,
          TError,
          Awaited<ReturnType<typeof getIncomeExpenseReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIncomeExpenseReport<TData = Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError = HTTPValidationError>(
 params: GetIncomeExpenseReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIncomeExpenseReport>>,
          TError,
          Awaited<ReturnType<typeof getIncomeExpenseReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIncomeExpenseReport<TData = Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError = HTTPValidationError>(
 params: GetIncomeExpenseReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Income Expense
 */

export function useGetIncomeExpenseReport<TData = Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError = HTTPValidationError>(
 params: GetIncomeExpenseReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeExpenseReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIncomeExpenseReportQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Totales por categor√≠a dentro de un rango de fechas. Puedes filtrar por tipo.
 * @summary Get By Category
 */
export const getByCategoryReport = (
    params: GetByCategoryReportParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryReportResponse>(
      {url: `/reports/by-category`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByCategoryReportQueryKey = (params: GetByCategoryReportParams,) => {
    return [`/reports/by-category`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByCategoryReportQueryOptions = <TData = Awaited<ReturnType<typeof getByCategoryReport>>, TError = HTTPValidationError>(params: GetByCategoryReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByCategoryReportQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByCategoryReport>>> = ({ signal }) => getByCategoryReport(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetByCategoryReportQueryResult = NonNullable<Awaited<ReturnType<typeof getByCategoryReport>>>
export type GetByCategoryReportQueryError = HTTPValidationError


export function useGetByCategoryReport<TData = Awaited<ReturnType<typeof getByCategoryReport>>, TError = HTTPValidationError>(
 params: GetByCategoryReportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByCategoryReport>>,
          TError,
          Awaited<ReturnType<typeof getByCategoryReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetByCategoryReport<TData = Awaited<ReturnType<typeof getByCategoryReport>>, TError = HTTPValidationError>(
 params: GetByCategoryReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByCategoryReport>>,
          TError,
          Awaited<ReturnType<typeof getByCategoryReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetByCategoryReport<TData = Awaited<ReturnType<typeof getByCategoryReport>>, TError = HTTPValidationError>(
 params: GetByCategoryReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get By Category
 */

export function useGetByCategoryReport<TData = Awaited<ReturnType<typeof getByCategoryReport>>, TError = HTTPValidationError>(
 params: GetByCategoryReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCategoryReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetByCategoryReportQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Serie temporal de transacciones (ingresos y gastos). Suma total por periodo.
 * @summary Get Trends
 */
export const getTrendReport = (
    params: GetTrendReportParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TrendReportResponse>(
      {url: `/reports/trends`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTrendReportQueryKey = (params: GetTrendReportParams,) => {
    return [`/reports/trends`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTrendReportQueryOptions = <TData = Awaited<ReturnType<typeof getTrendReport>>, TError = HTTPValidationError>(params: GetTrendReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTrendReportQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrendReport>>> = ({ signal }) => getTrendReport(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTrendReportQueryResult = NonNullable<Awaited<ReturnType<typeof getTrendReport>>>
export type GetTrendReportQueryError = HTTPValidationError


export function useGetTrendReport<TData = Awaited<ReturnType<typeof getTrendReport>>, TError = HTTPValidationError>(
 params: GetTrendReportParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrendReport>>,
          TError,
          Awaited<ReturnType<typeof getTrendReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrendReport<TData = Awaited<ReturnType<typeof getTrendReport>>, TError = HTTPValidationError>(
 params: GetTrendReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrendReport>>,
          TError,
          Awaited<ReturnType<typeof getTrendReport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrendReport<TData = Awaited<ReturnType<typeof getTrendReport>>, TError = HTTPValidationError>(
 params: GetTrendReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Trends
 */

export function useGetTrendReport<TData = Awaited<ReturnType<typeof getTrendReport>>, TError = HTTPValidationError>(
 params: GetTrendReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrendReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTrendReportQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



